{"version":3,"sources":["webpack:///./node_modules/refractor/lang/less.js"],"names":["less","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","punctuation","selector","variable","property","operator","insertBefore","function","mixin-usage","alias","module","exports","displayName","aliases"],"mappings":"2FAKA,SAAAA,EAAAC,GAQAA,EAAAC,UAAAF,KAAAC,EAAAC,UAAAC,OAAA,OACAC,QAAA,CACA,mBACA,CACAC,QAAA,kBACAC,YAAA,IAGAC,OAAA,CACAF,QAAA,8CACAG,OAAA,CACAC,YAAA,UAIAC,SAAA,CACAL,QAAA,yEACAG,OAAA,CAEAG,SAAA,aAGAC,SAAA,2CACAH,YAAA,YACAI,SAAA,aAGAZ,EAAAC,UAAAY,aAAA,sBACAC,SAAAd,EAAAC,UAAAF,KAAAe,WAEAd,EAAAC,UAAAY,aAAA,mBACAH,SAAA,CAEA,CACAN,QAAA,cACAG,OAAA,CACAC,YAAA,MAIA,aAEAO,cAAA,CACAX,QAAA,uCACAC,YAAA,EACAW,MAAA,cAxDAC,EAAAC,QAAAnB,EACAA,EAAAoB,YAAA,OACApB,EAAAqB,QAAA","file":"react-syntax-highlighter_languages_refractor_less-build.js","sourcesContent":["'use strict'\n\nmodule.exports = less\nless.displayName = 'less'\nless.aliases = []\nfunction less(Prism) {\n  /* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^|[^\\\\])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    atrule: {\n      pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n    punctuation: /[{}();:,]/,\n    operator: /[+\\-*\\/]/\n  })\n  // Invert function and punctuation positions\n  Prism.languages.insertBefore('less', 'punctuation', {\n    function: Prism.languages.less.function\n  })\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n      // Variable declaration (the colon must be consumed!)\n      {\n        pattern: /@[\\w-]+\\s*:/,\n        inside: {\n          punctuation: /:/\n        }\n      },\n      // Variable usage\n      /@@?[\\w-]+/\n    ],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  })\n}\n"],"sourceRoot":""}