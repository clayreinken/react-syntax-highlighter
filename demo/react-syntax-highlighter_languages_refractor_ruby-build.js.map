{"version":3,"sources":["webpack:///./node_modules/refractor/lang/ruby.js"],"names":["ruby","Prism","languages","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","insertBefore","regex","lookbehind","variable","symbol","builtin","constant","string","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,IAOG,SAAAA,GACHA,EAAAC,UAAAF,KAAAC,EAAAC,UAAAC,OAAA,SACAC,QAAA,CACA,MACA,CACAC,QAAA,+CACAC,QAAA,IAGAC,QAAA,yRAEA,IAAAC,EAAA,CACAH,QAAA,aACAI,OAAA,CACAC,UAAA,CACAL,QAAA,WACAM,MAAA,OAEAC,KAAAX,EAAAC,UAAAF,OAGAC,EAAAC,UAAAW,aAAA,kBACAC,MAAA,CACA,CACAT,QAAA,+DACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,wCACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CAEAH,QAAA,yDACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,0CACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,sCACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,+EACAU,YAAA,EACAT,QAAA,IAGAU,SAAA,+BACAC,OAAA,CACAZ,QAAA,mCACAU,YAAA,KAGAd,EAAAC,UAAAW,aAAA,iBACAK,QAAA,+OACAC,SAAA,0BAEAlB,EAAAC,UAAAF,KAAAoB,OAAA,CACA,CACAf,QAAA,+DACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,wCACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CAEAH,QAAA,yDACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,0CACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,sCACAC,QAAA,EACAG,OAAA,CACAD,kBAGA,CACAH,QAAA,2DACAC,QAAA,EACAG,OAAA,CACAD,mBApHG,CAwHAP,GAlIHoB,EAAAC,QAAAtB,EACAA,EAAAuB,YAAA,OACAvB,EAAAwB,QAAA","file":"react-syntax-highlighter_languages_refractor_ruby-build.js","sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = []\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;(function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r))*?=end/m,\n          greedy: true\n        }\n      ],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          // Here we need to specifically allow interpolation\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        // Here we need to specifically allow interpolation\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n  })(Prism)\n}\n"],"sourceRoot":""}