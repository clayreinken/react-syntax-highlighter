{"version":3,"sources":["webpack:///./node_modules/refractor/lang/pug.js"],"names":["pug","Prism","languages","comment","pattern","lookbehind","multiline-script","inside","rest","javascript","filter","filter-name","alias","multiline-plain-text","markup","doctype","flow-control","each","keyword","punctuation","branch","mixin","function","name","script","plain-text","tag","attributes","attr-value","attr-name","code","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","module","exports","displayName","aliases"],"mappings":"4FAKA,SAAAA,EAAAC,IACG,SAAAA,GAQHA,EAAAC,UAAAF,IAAA,CAGAG,QAAA,CACAC,QAAA,gDACAC,YAAA,GAIAC,mBAAA,CACAF,QAAA,uFACAC,YAAA,EACAE,OAAA,CACAC,KAAAP,EAAAC,UAAAO,aAIAC,OAAA,CACAN,QAAA,wEACAC,YAAA,EACAE,OAAA,CACAI,cAAA,CACAP,QAAA,WACAQ,MAAA,cAIAC,uBAAA,CACAT,QAAA,sFACAC,YAAA,GAEAS,OAAA,CACAV,QAAA,gBACAC,YAAA,EACAE,OAAA,CACAC,KAAAP,EAAAC,UAAAY,SAGAC,QAAA,CACAX,QAAA,kCACAC,YAAA,GAGAW,eAAA,CACAZ,QAAA,sEACAC,YAAA,EACAE,OAAA,CACAU,KAAA,CACAb,QAAA,iBACAG,OAAA,CACAW,QAAA,kBACAC,YAAA,MAGAC,OAAA,CACAhB,QAAA,gDACAQ,MAAA,WAEAJ,KAAAP,EAAAC,UAAAO,aAGAS,QAAA,CACAd,QAAA,yDACAC,YAAA,GAEAgB,MAAA,CAEA,CACAjB,QAAA,qBACAC,YAAA,EACAE,OAAA,CACAW,QAAA,SACAI,SAAA,oBACAH,YAAA,WAIA,CACAf,QAAA,iBACAC,YAAA,EACAE,OAAA,CACAgB,KAAA,CACAnB,QAAA,SACAQ,MAAA,YAEAJ,KAAAP,EAAAC,UAAAO,cAIAe,OAAA,CACApB,QAAA,oDACAC,YAAA,EACAE,OAAA,CACAC,KAAAP,EAAAC,UAAAO,aAGAgB,aAAA,CACArB,QAAA,qEACAC,YAAA,GAEAqB,IAAA,CACAtB,QAAA,+DACAC,YAAA,EACAE,OAAA,CACAoB,WAAA,CACA,CACAvB,QAAA,kBACAG,OAAA,CACAC,KAAAP,EAAAC,UAAAO,aAGA,CACAL,QAAA,YACAG,OAAA,CACAqB,aAAA,CACAxB,QAAA,iCACAC,YAAA,EACAE,OAAA,CACAC,KAAAP,EAAAC,UAAAO,aAGAoB,YAAA,2BACAV,YAAA,cAIAA,YAAA,MAGAW,KAAA,CACA,CACA1B,QAAA,wBACAC,YAAA,EACAE,OAAA,CACAC,KAAAP,EAAAC,UAAAO,cAIAU,YAAA,aAqBA,IAnBA,IAGAY,EAAA,CACA,CAAOrB,OAAA,OAAAsB,SAAA,QACP,CAAOtB,OAAA,SAAAsB,SAAA,gBACP,MACA,aACA,QACA,OACA,aACA,WACA,WACA,SACA,CAAOtB,OAAA,OAAAsB,SAAA,QACP,SACA,QAEAC,EAAA,GACAC,EAAA,EAAAC,EAAAJ,EAAAK,OAAuCF,EAAAC,EAAOD,IAAA,CAC9C,IAAAxB,EAAAqB,EAAAG,GACAxB,EACA,iBAAAA,EAAA,CAAsCA,SAAAsB,SAAAtB,GAAiCA,EACvET,EAAAC,UAAAQ,EAAAsB,YACAC,EAAA,UAAAvB,UAAA,CACAN,QAAAiC,OAxBA,+FAyBAC,QAAA,kBAAmD5B,UACnD,KAEAL,YAAA,EACAE,OAAA,CACAI,cAAA,CACAP,QAAA,WACAQ,MAAA,YAEAJ,KAAAP,EAAAC,UAAAQ,EAAAsB,aAKA/B,EAAAC,UAAAqC,aAAA,eAAAN,GA5LG,CA6LAhC,GAjMHuC,EAAAC,QAAAzC,EACAA,EAAA0C,YAAA,MACA1C,EAAA2C,QAAA","file":"react-syntax-highlighter_languages_refractor_pug-build.js","sourcesContent":["'use strict'\n\nmodule.exports = pug\npug.displayName = 'pug'\npug.aliases = []\nfunction pug(Prism) {\n  ;(function(Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n        // Declaration\n        {\n          pattern: /(^[\\t ]*)mixin .+/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^mixin/,\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\n            punctuation: /[(),.]/\n          }\n        },\n        // Usage\n        {\n          pattern: /(^[\\t ]*)\\+.+/m,\n          lookbehind: true,\n          inside: {\n            name: {\n              pattern: /^\\+\\w+/,\n              alias: 'function'\n            },\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              pattern: /&[^(]+\\([^)]+\\)/,\n              inside: {\n                rest: Prism.languages.javascript\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                  lookbehind: true,\n                  inside: {\n                    rest: Prism.languages.javascript\n                  }\n                },\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[!=(),]+/\n              }\n            }\n          ],\n          punctuation: /:/\n        }\n      },\n      code: [\n        {\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      punctuation: /[.\\-!=|]+/\n    }\n    var filter_pattern =\n      '(^([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r(?!\\\\n))(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'\n    // Non exhaustive list of available filters and associated languages\n    var filters = [\n      {filter: 'atpl', language: 'twig'},\n      {filter: 'coffee', language: 'coffeescript'},\n      'ejs',\n      'handlebars',\n      'hogan',\n      'less',\n      'livescript',\n      'markdown',\n      'mustache',\n      'plates',\n      {filter: 'sass', language: 'scss'},\n      'stylus',\n      'swig'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string' ? {filter: filter, language: filter} : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter),\n            'm'\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\n  })(Prism)\n}\n"],"sourceRoot":""}